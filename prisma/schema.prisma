// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    title     String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   AppUser @relation(fields: [createdById], references: [id])
    createdById String

    @@index([title])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token            String? // @db.Text
    expires_at              Int?
    token_type              String?
    scope                   String?
    id_token                String? // @db.Text
    session_state           String?
    user                    AppUser  @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         AppUser  @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AppUser {
    id            String    @id @default(cuid())
    firstName     String?
    lastName      String?
    phoneNumber   String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    password      String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    dateOfBirth   DateTime?
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
    deletedAt     DateTime?
    role          String?   @default("user")
    
    // CelebrateFriend relations
    createdCelebrations CelebrateFriend[] @relation("CreatedCelebrations")
    celebrationsForMe   CelebrateFriend[] @relation("Celebrante")

    @@map("app_users")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model CelebrateFriend {
    id            String   @id @default(cuid())
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt
    
    // Who created the celebration
    createdBy     AppUser  @relation("CreatedCelebrations", fields: [createdById], references: [id])
    createdById   String
    
    // Who is being celebrated
    celebrante    AppUser  @relation("Celebrante", fields: [celebranteId], references: [id])
    celebranteId  String
    
    // Contact details
    contactMethod String
    contact       String
    
    // Media relation
    media         Media?   @relation(fields: [mediaId], references: [id])
    mediaId       String?

    @@map("celebrate_friends")
}

model Media {
    id              String           @id @default(cuid())
    createdAt       DateTime         @default(now())
    updatedAt       DateTime         @updatedAt
    url             String
    type            String
    message         String?
    celebrateFriends CelebrateFriend[]
    
    @@map("media_messages")
}
